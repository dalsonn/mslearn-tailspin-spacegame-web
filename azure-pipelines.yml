trigger:
- '*'

pool:
  vmImage: ubuntu-latest
  demands:
  - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '8.x'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetSdkVersion)'
    
- script: dotnet --info
  displayName: 'Check .NET SDK info'
    
- script: |
    echo "🔍 Verificando instalação do Mono..."
    REQUIRED_VERSION="6.12.0"
    if command -v mono &> /dev/null; then
      INSTALLED_VERSION=$(mono --version | head -n 1 | awk '{print $5}')
      echo "Mono já instalado: $INSTALLED_VERSION"
      if dpkg --compare-versions "$INSTALLED_VERSION" ge "$REQUIRED_VERSION"; then
        echo "✅ Versão do Mono atende ao requisito (>= $REQUIRED_VERSION)."
        exit 0
      else
        echo "⚠️ Mono instalado é antigo. Atualizando..."
      fi
    else
      echo "❌ Mono não encontrado. Instalando..."
    fi
    sudo apt update
    sudo apt install -y gnupg ca-certificates
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
    echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
    sudo apt update
    sudo apt install -y mono-complete
  displayName: 'Install Mono'

- script: npm cache clean --force
  displayName: 'Clean NPM cache'
  
- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    command: 'install'
    workingDir: '$(Build.SourcesDirectory)'
    verbose: true

## Listar os arquivos dentro de node_modules/.bin após o install
- script: ls -la node_modules/.bin
  displayName: 'List contents of node_modules/.bin'
  
 - task: Npm@1
  displayName: 'Run npm build'
  inputs:
    command: 'custom'
    customCommand: 'run build'
    workingDir: '$(Build.SourcesDirectory)'

- script: './node_modules/.bin/sass $(wwwrootDir):$(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)
  
- task: NuGetAuthenticate@1
  displayName: 'Authenticate with NuGet feeds'
  
##- task: DotNetCoreCLI@2
##  displayName: 'Clean solution'
##  inputs:
##    command: 'clean'
##    projects: '**/*.csproj'

# - script: dotnet clean **/*.csproj
  # displayName: 'Clean solution'

- task: DotNetCoreCLI@2
  displayName: 'Restore DotNet dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'config'
    nugetConfigPath: '$(Build.SourcesDirectory)/nuget.config'
    
- task: NuGetCommand@2
  displayName: 'Restore NuGet dependencies'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    vstsFeed: '$(System.TeamProject)/Tailspin.SpaceGame.Web.Models'

- script: |
    echo "Limpando pastas de build"
    find . -type d -name "bin" -exec rm -rf {} +
    find . -type d -name "obj" -exec rm -rf {} +
  displayName: 'Clean build and obj folders'
  
- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

#depois do build
- task: DotNetCoreCLI@2
  displayName: 'Install .NET tools from local manifest'
  inputs:
    command: custom
    custom: tool
    arguments: 'restore'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Create code coverage report'
  inputs:
    command: custom
    custom: tool
    arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
#antes do publish

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()